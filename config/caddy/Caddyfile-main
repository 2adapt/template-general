# v2.8 - import with arguments

#vars {
#	WEBAPP_PORT {args[0]}
#	API_PORT {args[1]}
#	STATIC_PUBLIC_DIR {args[2]}
#}

# v2.9 - import with a block (https://github.com/caddyserver/caddy/pull/6130)

vars {
	{blocks.vars}
}

###############################################################################
# webapp routes (SvelteKit)
###############################################################################


handle /* {
	#respond "handle /*" 200

	#skip_log
	reverse_proxy {
		to localhost:{vars.WEBAPP_PORT}
	}

}



###############################################################################
# api routes (fastify)
###############################################################################

#handle /api/v1 {
#	redir * /api/v1/
#}

handle /api/v1/* {
	#respond "handle /api/v1/*" 200

	#skip_log
	reverse_proxy {
		to localhost:{vars.API_PORT}
	}

}



###############################################################################
# separate directories static assets (uploads, temporary csv files generated by the api, etc)
###############################################################################

handle /static-public {
	redir * /static-public/
}

handle /static-public/* {
	#respond "handle /static-public/*" 200

	#skip_log
	uri strip_prefix /static-public

	# note: routes for file_server that have some initial path segment (such as "/something/*")
	# should always be paired with a respective strip_prefix

	file_server {
		root {vars.STATIC_PUBLIC_DIR}
		browse
		precompressed br zstd gzip
	}
}



###############################################################################
# debug routes
###############################################################################

handle /caddy-debug/* {

	respond "

===
placeholders reference: https://caddyserver.com/docs/caddyfile/concepts#placeholders

hostname: {system.hostname}
wd: {system.wd}
system: {system.arch}-{system.os}
remote_host: {remote_host}
client_ip: {client_ip}
dir: {dir}
file.base: {file.base}
file.ext: {file.ext}
file: {file}
host: {host}
hostport: {hostport}
method: {method}
path: {path}
path.x: {path.x}
path.0: {path.0}
path.1: {path.1}
port: {port}
query: {query}
remote_host: {remote_host}
remote_port: {remote_port}
remote: {remote}
scheme: {scheme}
tls_cipher: {tls_cipher}
tls_client_certificate_der_base64: {tls_client_certificate_der_base64}
tls_client_certificate_pem: {tls_client_certificate_pem}
tls_client_fingerprint: {tls_client_fingerprint}
tls_client_issuer: {tls_client_issuer}
tls_client_serial: {tls_client_serial}
tls_client_subject: {tls_client_subject}
tls_version: {tls_version}
upstream_hostport: {upstream_hostport}
uri: {uri}
===

	" 200
}
